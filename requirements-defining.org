#+title: Requirement Defining

* What
Define an even more concrete description for each business process identified in
Business Modeling phase. Also, this phase add to or refine the Supplementary
Specifications  declared in Business Modeling discipline

* Why
To understand in greater details the definition and scope of the problem
identified in Business Modeling - /Business Use Case Specification/ is the
direct input to this phase.

The use-case model should serve as a communication medium and can serve as a
contract between the customer, the users, and the system developers on the
functionality of the system, which allows:
- Customers and users to validate that the system will become what they expected.
- System developers to build what is expected.

Each use case in the model is described in detail, showing step-by-step how the
system interacts with the actors, and what the system does in the use case.
These details function as a unifying thread throughout the software lifecycle;
the same use-case model is then used in system analysis, design

Relation to Other Disciplines
- The Business Modeling discipline provides Business Rules, a Business Use-Case
  Model and a Business Analysis Model, including a Domain Model and an
  organizational context for the system.
- The Analysis & Design discipline gets its primary input (the use-case model
  and the Glossary) from Requirements. Flaws in the use-case model can be
  discovered during analysis & design; change requests are then generated, and
  applied to the use-case model.
  
* How
The main deliverables are:
- Use Case Specification _with Prototype_
- Software Requirements Specification(Supplementary Specification with extra
  details

** Use Case Specification _with Prototype_
The textual description of the use case - a particular functionality of the
system. This is quite similar with the /Business Use Case Specification/, 
the description can be exactly the same. However we have a extra section /7.
Prototype/.

*** Checklist
- Is each concrete use case involved with at least one actor? If not, something
  is wrong; a use case that does not interact with an actor should be removed.
  For more information, see Guidelines.
- Is each use case independent of the others? If two use cases are always
  activated in the same sequence, you should probably merge them into one use
  case.
- For an included use case: does it make assumptions about the use cases that
  include it? Such assumptions should be avoided, so that the included use case
  is not affected by changes to the including use cases.
- Do any use cases have very similar behaviors or flows of events? If so - and
  if you wish their behavior to be similar in the future - you should merge them
  into a single use case. This makes it easier to introduce future changes.
  Note: you must involve the users if you decide to merge use cases, because the
  users, who interact with the new, merged use case will probably be affected.
- Has part of the flow of events already been modeled as another use case? If
  so, you can have the new use case use the old one.
- Is some part of the flow of events already part of another use case? If so,
  you should extract this subflow and have it be used by the use cases in
  question. Note: you must involve the users if you decide to "reuse" the
  subflow, because the users of the existing use case will probably be affected.
- Should the flow of events of one use case be inserted into the flow of events
  of another? If so, you model this with an extend-relationship to the other use
  case - adding a reference at the /Extension Points/ section.
- Do the use cases have unique, intuitive, and explanatory names so that they
  cannot be mixed up at a later stage? If not, you change their names.
- Do customers and users alike understand the names and descriptions of the use
  cases? Each use-case name must describe the behavior the use case supports.
- Does the use case meet all the requirements that obviously govern its
  performance? Any nonfunctional or functional requirements specific to this use
  case should be included in the object models in the use-case Special
  Requirements( this is quite hard to make sense of, but just write any idea out
  and we can discuss about it when reviewing).
- Does the communication sequence between actor and use case conform to the
  user's expectations?
- Is it clear how and when the use case's flow of events starts and ends?
- Behavior might exist that is activated only when a certain condition is not
  met. Is there a description of what will happen if a given condition is not
  met?
- Are any use cases overly complex? If you want your use-case model to be easy
  to understand, you might have to split up complex use cases.
- Does a use case contain disparate flows of events? If so, it is best to divide
  it into two or more separate use cases. A use case that contains disparate
  flows of events will be very difficult to understand and to maintain.
- Is the subflow in a use case modeled accurately?
- Is it clear who wishes to perform a use case? Is the purpose of the use case
  also clear?
- Are the actor interactions and exchanged information clear?
- Does the brief description give a true picture of the use case?

*** Guidelines
[[https://files.defcon.no/RUP/process/modguide/md_uc.htm#Top][Main reference]]
**** How much detail?
There will often be use cases in your model that are so simple that a
step-by-step outline is quite enough. The criteria for making this decision is
that designers and testers are comfortable with the level of detail provided by
the step-by-step format. Examples are use cases that describe simple entry or
retrieval of some data from the system.

**** Brief Description
Should reflect the use case purpose. As you write the description, refer to the
actors the action and if need to new concepts

**** Flow of Events
Should present what the system does, not explain how the system is designed to
do the use case

Should begin with an outline - bullets points of steps, then add more details

Guidelines for the contents:
- Describe only the events that belong to the use case, and not what happens in
  other use cases or outside of the system.
- Describe how the use case starts and ends.
- Describe what data is exchanged between the actor and the use case.
- _Do not describe the details of the user interface, unless it is necessary to
  understand the behavior of the system_. For example, it is often good to use a
  limited set of web-specific terminology when it is known beforehand that the
  application is going to be web-based. Words to include in your terminology
  could be "navigate", "browse", "hyperlink" "page", "submit", and "browser".
  However, it is not advisable to include references to "frames" or "web pages"
  in such a way that you are making assumptions about the boundaries between
  them - this is design decision.
- Describe the flow of events, not only the functionality. To enforce this,
  start every action with "When the actor ... ".
- Avoid vague terminology such as "for example", "etc. " and "information".

***** Style Format
There are 3 styles, but the 1^{st} style is recommended

#+begin_example

1.1. Start of Use Case
This use case starts when the actor Operator tells the system to create a
measurement order. The system will then retrieve all Network Element actors,
their measurement objects and corresponding measurement functions that are
available to this particular Operator. Available Network Elements are those that
are in operation, and that the Operator has the authority to access. The
availability of measurement functions depends on what has been set up for a
particular type of measurement object.

1.2. Configure Measurement Order
The system allows the actor Operator to select which Network Elements to measure
and then shows which measurement objects are available for the selected Network
Elements. The system allows the Operator to select from the measurement objects,
and then select which measurement functions to set up for each measurement
object.

The system allows the Operator to enter a textual comment on the measurement
order.

The Operator tells the system to complete the measurement order. The system will
respond by generating a unique name for the measurement order and setting up
default values for when, how often, and for how long the measurement should be
made. The default values are unique to each Operator. The system then allows the
Operator to edit these default values.

1.3. Initialize Order
The Operator tells the system to initialize the measurement order. The system
will then record the identity of the creating Operator, the date of creation,
and the "Scheduled" status of the measurement order.

1.4. Use Case Ends
The system confirms initialization of the measurement order to the Operator, and
the measurement order is made available for other actors to view.
#+end_example

***** Basic and Alternative
The basic flow should cover what normally happen as the use case is perform with
out error. The alternative flows cover optional or exceptional scenarios when
trying to follow the basic flow

Both basic and alternative flow can be breakdown into steps or subflows, the
main goal is for readability. A good rule is /the subflow should have a clear
and isolated role/ - either activate it or skip it entirely

**** Preconditions and Postconditions
Preconditions and Postconditions To top of page It can be useful to use the
notion of precondition and postcondition to clarify how the flow of events
starts and ends. However, only use it if it is perceived as adding value by the
audience of the use case.

The states described by pre- or postconditions should be states that the user
can observe. "The user has logged on to the system" or "The user has opened the
document" are examples of observable states.

Examples:
- A precondition for the use case Cash Withdrawal in the ATM machine: The
  customer has a personally-issued card that fits in the card reader, has been
  issued a PIN number, and is registered with the banking system.
- A postcondition for the use case Cash Withdrawal in the ATM machine: At the
  end of the use case, all account and transaction logs are balanced,
  communication with the banking system is reinitialized and the customer has
  been returned his card.
  
*** Examples Use Case Specification
- [[https://files.defcon.no/RUP/examples/creg/elaboration_e1/uc_specs.htm]]
- [[https://files.defcon.no/RUP/examples/csports/ovu_uc_inception.htm]]
